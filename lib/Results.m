%==========================================================================
% Output file initialization
def_filename = ['Result_' char(datetime("now", 'Format', ...
    'yyyy-MM-dd_HH-mm-ss')) '.txt'];
filename__ = inputdlg('insert output file name', 'hello', ...
    [1, 60], {def_filename});

filename = char(filename__{1});

fileID = fopen(fullfile('..', 'output', filename), 'w');

if fileID == -1
    fprintf('\n\n[ ERROR ] Failed to write to the file: %s\n\n', filename);
end

clear("filename__");
%==========================================================================

fprintf(fileID,'####################################################\n');
fprintf(fileID,'#         RESULTS FILE - GENERATED BY MATLAB       #\n');
fprintf(fileID,'#--------------------------------------------------#\n');
fprintf(fileID,'# Author  : Crivcianschi Alexei                    #\n');
fprintf(fileID,'# GitHub  : github.com/AlexeisEngineeringProjects  #\n');
fprintf(fileID,'# Date    : %-39s#\n', char(datetime("now")));
fprintf(fileID,'#--------------------------------------------------#\n');
fprintf(fileID,'# This file contains automatically generated       #\n');
fprintf(fileID,'# results from ME2_Solver v1.0.    Enjoy!          #\n');
fprintf(fileID,'####################################################\n\n');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    stator_dim = struct( ...
        'hj1', struct('value', hj1, 'unit', '[ mm ]'), ...
        'bd1', struct('value', bd1, 'unit', '[ mm ]'), ...
        'hd1', struct('value', hd1, 'unit', '[ mm ]'), ...
        ...
        'bcr1b', struct('value', bcr1b, 'unit', '[ mm ]'), ...
        'bcr1v', struct('value', bcr1v, 'unit', '[ mm ]'), ...
        'hpana', struct('value', hpana, 'unit', '[ mm ]'), ...
        ...
        'histm1', struct('value', histm1, 'unit', '[ mm ]'), ...
        'bistm1', struct('value', bistm1, 'unit', '[ mm ]'), ...
        ...
        'hcr1v', struct('value', hcr1v, 'unit', '[ mm ]'), ...
        'hcr1b', struct('value', hcr1b, 'unit', '[ mm ]'), ...
        'giz', struct('value', giz, 'unit', '[ mm ]'), ...
        ...
        'ext_Dj', struct('value', 10*Dej(1), 'unit', '[ mm ]'), ...
        'int_Dj', struct('value', 10*Dij(1), 'unit', '[ mm ]'), ...
        'lg', struct('value', lg, 'unit', '[ mm ]')...
        );
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    rotor__dim = struct( ...
        'hj2', struct('value', hj2, 'unit', '[ mm ]'), ...
        'bd2', struct('value', bd2, 'unit', '[ mm ]'), ...
        'hd2', struct('value', hd2, 'unit', '[ mm ]'), ...
        ...
        'histm2', struct('value', histm2, 'unit', '[ mm ]'), ...
        'bistm2', struct('value', bistm2, 'unit', '[ mm ]'), ...
        ...
        'bcr2b', struct('value', bcr1b, 'unit', '[ mm ]'), ...
        'bcr2v', struct('value', bcr1v, 'unit', '[ mm ]'), ...
        ...
        'ext_Dj', struct('value', 10*Dej(2), 'unit', '[ mm ]'), ...
        'int_Dj', struct('value', 10*Dij(2), 'unit', '[ mm ]'), ...
        'lg', struct('value', lg, 'unit', '[ mm ]'),...
        'air_gap', struct('value', delta, 'unit', '[ mm ]') ...
        );
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    mechanical_data = struct( ...
        'stator_mass', struct('value', (mj(1) + md(1)), 'unit', '[ kg ]'), ...
        'rotor__mass', struct('value', (mj(2) + md(2)), 'unit', '[ kg ]'), ...
        ...
        'nominal_Torque', struct('value', Mn, 'unit', '[ N*m ]'), ...
        'nominal__Power', struct('value', 0.001*Pn, 'unit', '[ kW ]')...
        );
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    electrical_data = struct( ...
        'Un', struct('value', Un, 'unit', '[ V ]'), ...
        'In', struct('value', IN, 'unit', '[ A ]'), ...
        'Sn', struct('value', 0.001*Sn, 'unit', '[ kVA ]'), ...
        'stator_crt', struct('value', IN, 'unit', '[ A ]'), ...
        'rotor__crt', struct('value', I2, 'unit', '[ A ]'), ...
        'ring___crt', struct('value', Ii, 'unit', '[ A ]'), ...
        'air_gap_induct', struct('value', Bdelta, 'unit', '[ T ]'), ...
        'air_gap_MMF', struct('value', Umdelta, 'unit', '[ A ]'), ...
        'cosFi', struct('value', cosFiN, 'unit', '[ - ]') ...
        );
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf(fileID, '\n\n\t[%10s] : \n\n', '   ROTOR  ');
fields = fieldnames(rotor__dim);
for i = 1:numel(fields)
    name = fields{i};
    fprintf(fileID, "%-15s = %8.2f %s\n", name, rotor__dim.(name).value, rotor__dim.(name).unit);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf(fileID, '\n\n\t[%10s] : \n\n', '  STATOR  ');
fields = fieldnames(stator_dim);
for i = 1:numel(fields)
    name = fields{i};
    fprintf(fileID, "%-15s = %8.2f %s\n", name, stator_dim.(name).value, stator_dim.(name).unit);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf(fileID, '\n\n\t[%10s] : \n\n', 'ELECTRICAL');
fields = fieldnames(electrical_data);
for i = 1:numel(fields)
    name = fields{i};
    fprintf(fileID, "%-15s = %8.2f %s\n", name, electrical_data.(name).value, electrical_data.(name).unit);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf(fileID, '\n\n\t[%10s] : \n\n', 'MECHANICAL');
fields = fieldnames(mechanical_data);
for i = 1:numel(fields)
    name = fields{i};
    fprintf(fileID, "%-15s = %8.2f %s\n", name, mechanical_data.(name).value, mechanical_data.(name).unit);
end

%==========================================================================
fclose(fileID);
fprintf('\n Output file writed succesfully!\n');
disp('Closing file...');
%==========================================================================
