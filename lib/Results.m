%==========================================================================
% Output file initialization
def_filename = ['Result_' char(datetime("now", 'Format', 'yyyy-MM-dd_HH-mm-ss')) '.txt'];
filename__ = inputdlg('insert output file name', 'hello', [1, 60], {def_filename});

filename = char(filename__{1});

fileID = fopen(fullfile('..', 'output', filename), 'w');

if fileID == -1
    disp('\n\n[ ERROR ] Failed to write to the file: %s\n\n', filename);
end

clear("filename__");
%==========================================================================


fprintf(fileID, "====================================================================\n");
fprintf(fileID, ['Result from ' char(datetime("now", 'Format', 'yyyy-MM-dd_HH-mm-ss')) '\n'])
fprintf(fileID, "====================================================================\n\n");

%==========================================================================
e_data = struct( ...
    'p', struct('value', p, 'unit', '[ - ]'), ...
    'sN', struct('value', sN, 'unit', '[ - ]'), ...
    'cos_fi', struct('value', cosFiN, 'unit', '[ - ]'), ...
    'U1', struct('value', U1, 'unit', '[ V ]'), ...
    'S', struct('value', Sn, 'unit', '[ VA ]'), ...
    'internal_S', struct('value', Sin, 'unit', '[ VA ]'), ...
    'EMF', struct('value', E1, 'unit', '[ V ]'), ...
    'inductia_intrefier', struct('value', Bdelta, 'unit', '[ mm ]'), ...
    'Z1', struct('value', Z1, 'unit', '[ - ]'), ...
    'Z2', struct('value', Z2, 'unit', '[ - ]'), ...
    'Flux', struct('value', Flux, 'unit', '[ Wb ]'), ...
    'w1', struct('value', w1, 'unit', '[ - ]'), ...
    'nominal_current', struct('value', IN, 'unit', '[ A ]'), ...
    'ring_current', struct('value', Ii, 'unit', '[ A ]'), ...
    'randament', struct('value', randamentul_nominal, 'unit', '[ - ]')...
    );



m_data = struct( ...
    'internal_diameter', struct('value', D, 'unit', '[ mm ]'), ...
    'external_diameter', struct('value', De, 'unit', '[ mm ]'), ...
    'pasul_polar', struct('value', tau, 'unit', '[ mm ]'), ...
    'lungimea_geometrica', struct('value', lg, 'unit', '[ mm ]'), ...
    'intrefier', struct('value', delta, 'unit', '[ mm ]'), ...
    'bcr1v', struct('value', bcr1v, 'unit', '[ mm ]'), ...
    'hutilcr1', struct('value', hutilcr1, 'unit', '[ mm ]'), ...
    'bcr1b', struct('value', bcr1b, 'unit', '[ mm ]'), ...
    'bd1v', struct('value', bd1v, 'unit', '[ mm ]'), ...
    'bd1b', struct('value', bd1b, 'unit', '[ mm ]'), ...
    'hj1', struct('value', hj1, 'unit', '[ mm ]'), ...
    'Dr', struct('value', Dr, 'unit', '[ mm ]'), ...
    'bcr2v', struct('value', bcr2v, 'unit', '[ mm ]'), ...
    'hcr2', struct('value', hcr2, 'unit', '[ mm ]'), ...
    'bcr2b', struct('value', bcr2b, 'unit', '[ mm ]'), ...
    'bd2v', struct('value', bd2v, 'unit', '[ mm ]'), ...
    'bd2b', struct('value', bd2b, 'unit', '[ mm ]'), ...
    'Dir', struct('value', Dir, 'unit', '[ mm ]'), ...
    'bistm1', struct('value', bistm1, 'unit', '[ mm ]'), ...
    'bistm2', struct('value', bistm2, 'unit', '[ mm ]'), ...
    'hd1', struct('value', hd1, 'unit', '[ mm ]'), ...
    'hd2', struct('value', hd2, 'unit', '[ mm ]'), ...
    'bcr1m', struct('value', bcr1m, 'unit', '[ mm ]'), ...
    'hcr1v', struct('value', hcr1v, 'unit', '[ mm ]'), ...
    'hcr1b', struct('value', hcr1b, 'unit', '[ mm ]'), ...
    'bcr2', struct('value', bcr2, 'unit', '[ mm ]'), ...
    'bd1', struct('value', bd1, 'unit', '[ mm ]'), ...
    'bd2', struct('value', bd2, 'unit', '[ mm ]'), ...
    'diam_ext_jug_stator', struct('value', Dej(1), 'unit', '[ mm ]'), ...
    'diam_ext_jug_rotor', struct('value', Dej(2), 'unit', '[ mm ]'), ...
    'diam_int_jug_stator', struct('value', Dij(1), 'unit', '[ mm ]'), ...
    'diam_int_jug_rotor', struct('value', Dij(2), 'unit', '[ mm ]'), ...
    'masa_rotor', struct('value', m1, 'unit', '[ mm ]'), ...
    'masa_stator', struct('value', m2, 'unit', '[ mm ]'), ...
    'Torque', struct('value', Mn, 'unit', '[ mm ]') ...
    );

fprintf(fileID, '\n\n-------------------------------[electrical values]--------------------------------------\n');
fields = fieldnames(e_data);
for i = 1:numel(fields)
    name = fields{i};
    fprintf(fileID, "%-12s = %8.2f %s\n", name, e_data.(name).value, e_data.(name).unit);
end
fprintf(fileID, '\n-------------------------------------------------------------------------------------\n\n');



fprintf(fileID, '\n\n-------------------------------[mechanical values]--------------------------------------\n');
fields = fieldnames(m_data);
for i = 1:numel(fields)
    name = fields{i};
    fprintf(fileID, "%-12s = %8.2f %s\n", name, m_data.(name).value, m_data.(name).unit);
end
fprintf(fileID, '\n-------------------------------------------------------------------------------------\n\n');

%==========================================================================
disp('Closing file...');
status = fclose(fileID);
disp(['fclose returned: ', num2str(status)]);fprintf('\n Output file writed succesfully!\n');
%==========================================================================
